// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime? @map("email_verified") @db.Timestamptz(6)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  accounts    Account[]
  sessions    Session[]
  events      Event[]
  bookings    Booking[]
  eventImages EventImage[]

  @@map("users")
}

model VerificationToken {
  token      String   @id
  identifier String
  expires    DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("verification_tokens")
}

// Application specific tables
enum EventCategory {
  PET_MEET     @map("Pet Meet")
  GAMES_NIGHT  @map("Games Night")
  RECREATION   @map("Recreation")

  @@map("event_category")
}

enum BookingStatus {
  PENDING   @map("pending")
  CONFIRMED @map("confirmed")
  CANCELLED @map("cancelled")

  @@map("booking_status")
}

model Event {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String        @db.Text
  description   String        @db.Text
  category      EventCategory
  date          DateTime      @db.Date
  time          DateTime      @db.Time(6)
  location      String        @db.Text
  address       String        @db.Text
  seats         Int
  hostName      String        @map("host_name") @db.Text
  hostWhatsapp  String        @map("host_whatsapp") @db.Text
  hostId        String        @map("host_id") @db.Uuid
  imageUrl      String?       @map("image_url") @db.Text
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  host        User         @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  eventImages EventImage[]

  @@map("events")
}

model Booking {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  eventId        String        @map("event_id") @db.Uuid
  userId         String        @map("user_id") @db.Uuid
  numberOfPeople Int           @map("number_of_people")
  status         BookingStatus @default(PENDING)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("bookings")
}

model EventImage {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  eventId      String   @map("event_id") @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  filename     String   @db.Text
  originalName String   @map("original_name") @db.Text
  mimeType     String   @map("mime_type") @db.Text
  sizeBytes    Int      @map("size_bytes")
  filePath     String   @map("file_path") @db.Text
  isPrimary    Boolean  @default(false) @map("is_primary")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_images")
}
